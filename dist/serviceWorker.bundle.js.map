{"version":3,"file":"serviceWorker.bundle.js","mappings":";;AAAA;AACA;AACA;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://extensionfolder/webpack/bootstrap","webpack://extensionfolder/webpack/runtime/define property getters","webpack://extensionfolder/webpack/runtime/hasOwnProperty shorthand","webpack://extensionfolder/webpack/runtime/make namespace object","webpack://extensionfolder/./src/serviceWorker.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Global state\r\nlet isRunning = false;\r\n\r\n// Cache handling\r\nself.addEventListener('fetch', event => {\r\n    if (!/^https?:/.test(event.request.url)) {\r\n        return;\r\n    }\r\n\r\n    event.respondWith(\r\n        caches.match(event.request).then(response => {\r\n            return response || fetch(event.request).then(networkResponse => {\r\n                return caches.open('chrome-extension').then(cache => {\r\n                    if (networkResponse.ok) {\r\n                        cache.put(event.request, networkResponse.clone());\r\n                    }\r\n                    return networkResponse;\r\n                });\r\n            });\r\n        }).catch(() => {\r\n            // Handle fetch failures silently\r\n        })\r\n    );\r\n});\r\n\r\n// Helper functions\r\nasync function getCurrentTab() {\r\n    const queryOptions = { active: true, lastFocusedWindow: true };\r\n    const [tab] = await chrome.tabs.query(queryOptions);\r\n    return tab;\r\n}\r\n\r\nasync function isCSPDisabled() {\r\n    const rules = await chrome.declarativeNetRequest.getSessionRules();\r\n    const urls = rules.map(rule => rule.condition.urlFilter);\r\n    const { url } = await getCurrentTab();\r\n    return urls.some(item => item === url);\r\n}\r\n\r\nasync function disableCSP(tabId) {\r\n    if (isRunning) return;\r\n    isRunning = true;\r\n\r\n    const addRules = [];\r\n    const removeRuleIds = [];\r\n    const { url } = await getCurrentTab();\r\n\r\n    if (!await isCSPDisabled()) {\r\n        addRules.push({\r\n            id: Math.floor(Math.random() * 2147483647),\r\n            action: {\r\n                type: 'modifyHeaders',\r\n                responseHeaders: [{\r\n                    header: 'content-security-policy',\r\n                    operation: 'set',\r\n                    value: ''\r\n                }]\r\n            },\r\n            condition: {\r\n                urlFilter: url,\r\n                resourceTypes: ['main_frame', 'sub_frame']\r\n            }\r\n        });\r\n        chrome.browsingData.remove({}, { serviceWorkers: true }, () => { });\r\n    } else {\r\n        const rules = await chrome.declarativeNetRequest.getSessionRules();\r\n        rules.forEach(rule => {\r\n            if (rule.condition.urlFilter === url) {\r\n                removeRuleIds.push(rule.id);\r\n            }\r\n        });\r\n    }\r\n\r\n    await chrome.declarativeNetRequest.updateSessionRules({ addRules, removeRuleIds });\r\n    isRunning = false;\r\n}\r\n\r\n// Platform detection and message handling\r\nasync function handleTabUpdate(tabId, changeInfo, tab) {\r\n    if (changeInfo.status === 'complete' && tab.url) {\r\n        if (tab.url.includes('linkedin.com/feed/')) {\r\n            await disableCSP(tabId);\r\n        }\r\n    }\r\n}\r\n\r\nexport async function triggerFilter(filter, mark) {\r\n    let platform = 'none';\r\n\r\n    const [tab] = await chrome.tabs.query({\r\n        active: true,\r\n        lastFocusedWindow: true\r\n    });\r\n\r\n    const tabUrl = tab.url;\r\n\r\n    if (tabUrl.includes('linkedin.com/feed/')) {\r\n        platform = 'linkedin';\r\n    } else if (tabUrl.includes('twitter.com/home') || tabUrl.includes('x.com/home')) {\r\n        platform = 'twitter';\r\n    }\r\n\r\n    const response = await chrome.tabs.sendMessage(tab.id, {\r\n        platform,\r\n        filter,\r\n        mark\r\n    });\r\n\r\n    console.log(response);\r\n}\r\n\r\n// Initialize listeners\r\nchrome.tabs.onUpdated.addListener(handleTabUpdate);\r\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n    // Handle any additional message passing here\r\n    return true;\r\n});"],"names":[],"sourceRoot":""}