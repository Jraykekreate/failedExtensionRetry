{"version":3,"file":"serviceWorker.bundle.js","mappings":";;AAAA;AACA;AACA;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://extensionfolder/webpack/bootstrap","webpack://extensionfolder/webpack/runtime/define property getters","webpack://extensionfolder/webpack/runtime/hasOwnProperty shorthand","webpack://extensionfolder/webpack/runtime/make namespace object","webpack://extensionfolder/./src/serviceWorker.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","self.addEventListener('fetch', event => {\r\n    // Only handle http/https requests.\r\n    if (!/^https?:/.test(event.request.url)) {\r\n        // Let the request fall through without caching.\r\n        return;\r\n    }\r\n\r\n    event.respondWith(\r\n        caches.match(event.request).then(response => {\r\n            return response || fetch(event.request).then(networkResponse => {\r\n                return caches.open('chrome-extension').then(cache => {\r\n                    // Optionally check that the response is valid before caching\r\n                    if (networkResponse.ok) {\r\n                        cache.put(event.request, networkResponse.clone());\r\n                    }\r\n                    return networkResponse;\r\n                });\r\n            });\r\n        }).catch(() => {\r\n            // Optional: Return a fallback response if needed.\r\n        })\r\n    );\r\n});\r\n// Listen for a one-time message from the content script.\r\n\r\n\r\n\r\nexport async function triggerFilter(filter, mark) {\r\n    let platform = 'none'; // Default platform\r\n\r\n    // Check the current URL to determine the platform\r\n    const [tab] = await chrome.tabs.query({ active: true, lastFocusedWindow: true });\r\n    const tabUrl = tab.url;\r\n\r\n    if (tabUrl.includes('linkedin.com/feed/')) {\r\n        platform = 'linkedin';\r\n    } else if (tabUrl.includes('twitter.com/home') || tabUrl.includes('x.com/home')) {\r\n        platform = 'twitter';\r\n    }\r\n    const response = await chrome.tabs.sendMessage(tab.id, { platform, filter, mark });\r\n    // do something with response here, not outside the function\r\n    console.log(response);\r\n}"],"names":[],"sourceRoot":""}