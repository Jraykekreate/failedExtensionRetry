{"version":3,"file":"contentScript.bundle.js","mappingssources":["webpack://extensionfolder/./src/contentScript.js"],"sourcesContent":["(function () {\r\n    // Configuration\r\n    const MAX_POSTS = 10;\r\n    const DISMISS_THRESHOLD = 0.6;\r\n    const POPUP_TIMEOUT = 1500;\r\n\r\n    // Semantic similarity thresholds\r\n    const SIMILARITY_THRESHOLDS = {\r\n        HIGH: 0.7,    // Green\r\n        MEDIUM: 0.4   // Yellow (below is Red)\r\n    };\r\n\r\n    // Track processed posts\r\n    const results = [];\r\n    let processedCount = 0;\r\n    const processedPosts = new Map(); // Store references to processed posts\r\n\r\n    // Robust selectors\r\n    const SELECTORS = {\r\n        dismissButton: '[aria-label^=\"Dismiss post by\"]',\r\n        notInterested: '[aria-label^=\"I don\\'t want to see\"]',\r\n        postContainer: '.feed-shared-update-v2',\r\n        popupContainer: '.update-components-hidden-update-v2'\r\n    };\r\n\r\n    // Create and add marker to post\r\n    const addMarker = (postElement, score) => {\r\n        const marker = document.createElement('div');\r\n        marker.style.cssText = `\r\n            position: absolute;\r\n            top: 10px;\r\n            right: 10px;\r\n            width: 12px;\r\n            height: 12px;\r\n            border-radius: 50%;\r\n            z-index: 1000;\r\n            border: 2px solid white;\r\n            box-shadow: 0 0 3px rgba(0,0,0,0.3);\r\n        `;\r\n\r\n        // Set color based on score\r\n        if (score >= SIMILARITY_THRESHOLDS.HIGH) {\r\n            marker.style.backgroundColor = '#4CAF50'; // Green\r\n        } else if (score >= SIMILARITY_THRESHOLDS.MEDIUM) {\r\n            marker.style.backgroundColor = '#FFC107'; // Yellow\r\n        } else {\r\n            marker.style.backgroundColor = '#F44336'; // Red\r\n        }\r\n\r\n        // Add tooltip\r\n        marker.title = `Similarity Score: ${(score * 100).toFixed(1)}%`;\r\n\r\n        // Ensure post element has relative positioning\r\n        if (getComputedStyle(postElement).position === 'static') {\r\n            postElement.style.position = 'relative';\r\n        }\r\n\r\n        postElement.appendChild(marker);\r\n        return marker;\r\n    };\r\n\r\n    // Function to handle the \"Not Interested\" popup\r\n    const handlePopup = (postContainer) => {\r\n        const observer = new MutationObserver((mutations, obs) => {\r\n            const notInterestedBtn = postContainer.querySelector(SELECTORS.notInterested);\r\n            if (notInterestedBtn) {\r\n                notInterestedBtn.click();\r\n                console.log('Clicked \"Not Interested\" for post');\r\n                obs.disconnect();\r\n            }\r\n        });\r\n\r\n        observer.observe(postContainer, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n\r\n        setTimeout(() => {\r\n            observer.disconnect();\r\n            console.log('Popup handling timeout');\r\n        }, POPUP_TIMEOUT);\r\n    };\r\n\r\n    // Function to process a single post\r\n    const processPost = async (button, index) => {\r\n        const postContainer = button.closest(SELECTORS.postContainer);\r\n        if (!postContainer || processedPosts.has(postContainer)) return;\r\n\r\n        const postInfo = {\r\n            postNumber: index + 1,\r\n            dismissed: false,\r\n            notInterestedClicked: false,\r\n            title: 'Unknown',\r\n            score: 0\r\n        };\r\n\r\n        // Get post title/content\r\n        const titleElement = postContainer.querySelector('span[dir=\"ltr\"]');\r\n        postInfo.title = titleElement?.firstChild?.textContent.trim().slice(0, 50) + '...';\r\n\r\n        // Calculate semantic similarity score\r\n        // Assuming semanticSimilarity is defined elsewhere\r\n        try {\r\n            // Replace these with your actual text comparison logic\r\n            const text1 = postContainer.textContent;\r\n            const text2 = \"business\"; // Define your reference text\r\n            postInfo.score = await semanticSimilarity(text1, text2);\r\n        } catch (error) {\r\n            console.error('Error calculating semantic similarity:', error);\r\n            postInfo.score = Math.random(); // Fallback for testing\r\n        }\r\n\r\n        // Add visual marker\r\n        const marker = addMarker(postContainer, postInfo.score);\r\n\r\n        // Store reference to post and its marker\r\n        processedPosts.set(postContainer, {\r\n            info: postInfo,\r\n            marker: marker\r\n        });\r\n\r\n        if (postInfo.score < DISMISS_THRESHOLD) {\r\n            console.log(`Dismissing post ${postInfo.postNumber}: \"${postInfo.title}\"`);\r\n            button.click();\r\n            postInfo.dismissed = true;\r\n            handlePopup(postContainer);\r\n        }\r\n\r\n        results.push(postInfo);\r\n        processedCount++;\r\n\r\n        if (processedCount === MAX_POSTS) {\r\n            showFinalReport();\r\n        }\r\n    };\r\n\r\n    // Function to show final results\r\n    const showFinalReport = () => {\r\n        console.log('%cProcessing Complete!', 'color: green; font-size: 16px;');\r\n        console.table(results);\r\n    };\r\n\r\n    // Scroll event handler\r\n    window.addEventListener('scroll', () => {\r\n        if (window.location.href.includes(\"linkedin.com/feed/\")) {\r\n            const dismissButtons = Array.from(document.querySelectorAll(SELECTORS.dismissButton))\r\n                .filter(btn => !processedPosts.has(btn.closest(SELECTORS.postContainer)));\r\n\r\n            dismissButtons.forEach((btn, index) => processPost(btn, index));\r\n        }\r\n    });\r\n\r\n    // Initial processing\r\n    const dismissButtons = Array.from(document.querySelectorAll(SELECTORS.dismissButton))\r\n        .slice(0, MAX_POSTS);\r\n\r\n    if (dismissButtons.length > 0) {\r\n        console.log(`Found ${dismissButtons.length} posts to process`);\r\n        dismissButtons.forEach((btn, index) => processPost(btn, index));\r\n    } else {\r\n        console.log('No dismiss buttons found');\r\n    }\r\n\r\n    // Message listener\r\n    chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\r\n        if (request.platform.includes(\"linkedin\")) {\r\n            // Clear existing markers\r\n            processedPosts.forEach((data, post) => {\r\n                if (data.marker && data.marker.parentNode) {\r\n                    data.marker.remove();\r\n                }\r\n            });\r\n            processedPosts.clear();\r\n            results.length = 0;\r\n            processedCount = 0;\r\n        }\r\n        alert(`${request.platform} ${request.filter}`);\r\n    });\r\n})();"],"names":[],"sourceRoot":""}